@page "/"

@rendermode InteractiveServer
@using CinemaApp.Models
@using CinemaApp.Services

<style>
    body {
        height: 100vh;
        width: 100vw;
        overflow-y: hidden;
        overflow-x: hidden;
        justify-content: center;
        padding: 2%;
        display: flex;
        flex-direction: column;
        text-align: center;
    }

    h1 {
        color: black;
        font-size: 12px;
        font-weight: bold;
    }

    label {
        font-size: 120%;
        color:black;
    }

    button {
        margin: 15px;
    }

    .container { 
        text-align: center;
        padding: 20px;
        border: 5px solid rgba(1.9, 1.9, 1.9, 0.5);
        border-radius: 10px;
        background-color: #34c0eb;
        display: flex;
        flex-direction: column;
    }

    .form_class {
        text-align: center;
        flex-direction: column;
    }

    .login, .register {
        margin: 5px 25%;
    }

    .or_bor {
        background-color: rgba(1.9, 1.9, 1.9, 0.5);
        height: 3px;
        border-radius: 10px;
        margin: 0px 10px;
    }

    .title {
        font-size: 400%;
        margin-bottom: 20px;
    }

</style>

<PageTitle>Moviestar Cinema</PageTitle>
<h1 class="title">Moviestar Cinema</h1>
<div class="container">
    <div class="form_class">

        <div class="login">
            <h1 class="display-6 font-raleway">Prijava</h1>
            <EditForm Model="this" OnValidSubmit="LogIn" FormName="LoginForm">
                <div>
                    <label for="name">E-mail:</label>
                    <InputText id="email" class="form-control" @bind-Value="email" />
                </div>
                <div>
                    <label for="password" class="mt-2">Lozinka:</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginPassword" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary btn-custom">Prijava</button>
                </div>
            </EditForm>
        </div>
        <div class="or_bor"></div>

        <div class="register">
            <h1 class="display-6 font-raleway">Registracija</h1>
            <EditForm Model="registrationModel" OnValidSubmit="Register" FormName="RegistrationForm">
                <DataAnnotationsValidator />
                <div>
                    <label for="name">Ime:</label>
                    <InputText id="name" class="form-control" @bind-Value="registrationModel.Name" />
                    <ValidationMessage For="() => registrationModel.Name" />
                </div>
                <div>
                    <label for="lastname">Prezime:</label>
                    <InputText id="name" class="form-control" @bind-Value="registrationModel.LastName" />
                    <ValidationMessage For="() => registrationModel.LastName" />
                </div>
                <div>
                    <label for="email">Email:</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="registrationModel.Email" />
                    <ValidationMessage For="() => registrationModel.Email" />
                </div>
                <div>
                    <label for="password" class="mt-2">Lozinka:</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
                    <ValidationMessage For="() => registrationModel.Password" />
                </div>
                <div>
                    <label for="passwordConfirm" class="mt-2">Ponovljena lozinka:</label>
                    <InputText id="passwordConfirm" type="password" class="form-control" @bind-Value="registrationModel.ConfirmPassword" />
                    <ValidationMessage For="() => registrationModel.ConfirmPassword" />
                </div>
                <div>
                    <button type="submit" class="btn btn-primary btn-custom">Registriraj se</button>
                </div>
            </EditForm>
        </div>
            

        @if (IsErrorMessageVisible)
        {
            <div class="mt-4">
                <p style="color:red">@ErrorMessage</p>
            </div>
        }
    </div>
</div>



@code {
    [Inject] private NavigationManager NavManager { get; set; }
    [Inject] private LoggedInUserModel LoggedInUser { get; set; }
    [Inject] private UserService userService { get; set; }
    [Inject] private SeatService seatService { get; set; }

    [SupplyParameterFromForm] private string email { get; set; }
    [SupplyParameterFromForm] private string loginPassword { get; set; }

    [SupplyParameterFromForm] private RegistrationModel registrationModel { get; set; } = new();

    private bool IsErrorMessageVisible { get; set; }
    private string ErrorMessage { get; set; }
    private bool IsRegistered { get; set; } = true;

    private void ToggleRegistration()
    {
        IsRegistered = !IsRegistered;
        IsErrorMessageVisible = false;
    }

    private void LogIn()
        {
            try
            {
                var result = userService.Login(email, loginPassword);
                if (result != null)
                {
                    //ˇˇUsed to call a Method to fill a DB. Call only first time.ˇˇ
                    //seatService.LoadSeats();
                    LoggedInUser.Id = result.Id;
                    LoggedInUser.User = result;
                    NavManager.NavigateTo("/MovieSelection");
                }
                else
                {
                    IsErrorMessageVisible = true;
                    ErrorMessage = "Email ili lozinka nisu točni.";
                    email = "";
                    loginPassword = "";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
                throw;
            }
        }

        private void Register()
        {
            try
            {
                IsErrorMessageVisible = false;
                ErrorMessage = "";

                var result = userService.GetUser(registrationModel.Email);
                if (result is not null)
                {
                    IsErrorMessageVisible = true;
                    ErrorMessage = "Email već postoji!";
                    return;
                }

                var user = new UserModel
                    {
                        Name = registrationModel.Name,
                        LastName = registrationModel.LastName,
                        Password = registrationModel.Password,
                        Email = registrationModel.Email
                    };

                userService.CreateUser(user);

                email = registrationModel.Email;
                loginPassword = registrationModel.Password;
                LogIn();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
                throw;
            }
        }
 }
